daemon off;
worker_processes auto;

error_log /app/vendor/nginx/var/log/error.log;

events {
    use epoll;
    accept_mutex on;
    worker_connections 1024;
}

http {
    gzip on;
    gzip_comp_level 2;
    gzip_min_length 512;

    server_tokens off;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    # types_hash_max_size 2048;

    client_body_temp_path /tmp/client_temp 1 2;
    proxy_temp_path /tmp/nginx/proxy_temp 1 2;

    log_format l2met 'measure#nginx.service=$request_time request_id=$http_x_request_id';

    # access_log /app/logs/nginx/access.log l2met;
    # error_log /app/logs/nginx/error.log;
    access_log /dev/stdout;

    include mime.types;
    default_type application/octet-stream;

    # Must read the body in 5 seconds.
    client_body_timeout 5;

    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    upstream websocket {
        server unix:/tmp/daphne.sock fail_timeout=0;
    }

    upstream app_server {
        server unix:/tmp/nginx.socket fail_timeout=0;
    }

    server {
        listen 80;
        server_name _;
        keepalive_timeout 5;
        client_max_body_size 64M;

        location / {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_redirect off;
            proxy_pass http://app_server;
        }

        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }

        location = /robots.txt {
            allow all;
            log_not_found off;
            access_log off;
        }

        location ~* \.(?:ico|css|js|gif|jpe?g|png)$ {
            expires 30d;
            add_header Pragma public;
            add_header Cache-Control "public";
        }

        location /static/ {
                alias /app/static/;
                expires 30d;
                autoindex off;
        }

        location /ws/ {
            proxy_pass http://websocket;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }
    }
}

